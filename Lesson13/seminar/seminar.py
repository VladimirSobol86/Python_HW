from typing import Any

# Задание №1
# Создайте функцию, которая запрашивает числовые данные от
# пользователя до тех пор, пока он не введёт целое или
# вещественное число.
# Обрабатывайте не числовые данные как исключения.
def input_num():
    while True:
        number = input('Введите целое или вещ число: ')
        try:
            return int(number)
        except:
            try:
                return float(number)
            except:
                print('Это не число, попробуйте еще раз')
            
# print(input_num())

# Задание №2
# Создайте функцию аналог get для словаря.
# Помимо самого словаря функция принимает ключ и значение по умолчанию.
# При обращении к несуществующему ключу функция должна возвращать дефолтное значение.
# Реализуйте работу через обработку исключений.
def our_get(dct: dict, key: Any, default_value: Any = None) -> Any:
    try:
        return dct[key]
    except KeyError:
        return default_value
    except TypeError:
        return 'Ошибка типа ключа!'

dict_1 = {1:'one', 2:'two'}
print(our_get(dict_1, [1,2]))
print(our_get(dict_1, 1))
print(our_get(dict_1, 3, default_value='Пусто'))

# Задание №3
# Создайте класс с базовым исключением и дочерние классыисключения:
# ○ ошибка уровня,
# ○ ошибка доступа.

#Решение: созданы файле exeptions.py

# Задание №4
# Вспоминаем задачу из семинара 8 про сериализацию данных,
# где в бесконечном цикле запрашивали имя, личный
# идентификатор и уровень доступа (от 1 до 7) сохраняя
# информацию в JSON файл.
# Напишите класс пользователя, который хранит эти данные в
# свойствах экземпляра.
# Отдельно напишите функцию, которая считывает информацию
# из JSON файла и формирует множество пользователей.

#Решение: class User в файле classes, def load_users() в файле main

# Задание №5
# Доработаем задачи 3 и 4. Создайте класс проекта, который
# имеет следующие методы:
# загрузка данных (функция из задания 4)
# вход в систему - требует указать имя и id пользователя. Для
# проверки наличия пользователя в множестве используйте
# магический метод проверки на равенство пользователей.
# Если такого пользователя нет, вызывайте исключение
# доступа. А если пользователь есть, получите его уровень из
# множества пользователей.
# добавление пользователя. Если уровень пользователя
# меньше, чем ваш уровень, вызывайте исключение уровня
# доступа.

#Решение:class Terminal в файле classes

# Задание №6
# Доработайте классы исключения так, чтобы они выдали подробную информацию об ошибках.
# Передавайте необходимые данные из основного кода проекта.

#Решение: доработаны в файле classes